# -*- coding: utf-8 -*-
"""Loan_pass_prediction_using_DT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jx6AiaG7yAT8-mpj9W5qXU0MKzQmbq_c
"""

!pip install numpy pandas matplotlib seaborn scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/loan.csv')
df.head()

df.drop('Loan_ID',axis=1,inplace=True)

for i in df.Loan_Status:
  if i=='Y':
    df.Loan_Status.replace('Y',1,inplace=True)
  else:
    df.Loan_Status.replace('N',0,inplace=True)

df.head()

df.isna().sum()

for i in df.Gender:
  if i=='NaN':
    df.Gender.replace('NaN','Male',inplace=True)

df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Married'].fillna(df['Married'].mode()[0], inplace=True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace=True)

# Check unique values in the column to see what's causing the error
print(df['Dependents'].unique())

# Step 1: Replace non-numeric string values (like '3+') with a number
df['Dependents'].replace('3+', 3, inplace=True)

# Step 2: Convert the column to a numeric data type
df['Dependents'] = pd.to_numeric(df['Dependents'])

# Step 3: Now you can safely fill the missing values with the mean
df['Dependents'].fillna(df['Dependents'].mean(), inplace=True)

# Proceed with the other columns which seem to be numerical
df['LoanAmount'].fillna(df['LoanAmount'].mean(), inplace=True)
df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean(), inplace=True)

df.head(15)
df['Credit_History'].fillna(df['Credit_History'].mean(), inplace=True)
df.isna().sum()

# Select the feature columns from the DataFrame and assign to x
x = df[['Dependents','ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term',
        'Credit_History']]

# Select the target column from the DataFrame and assign to y
y = df['Loan_Status']

# Now you can correctly perform the train-test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn import tree
clf=tree.DecisionTreeClassifier()
clf.fit(x_train,y_train)

from sklearn import metrics
y_pred=clf.predict(x_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

df.head()

clf.predict([[0.0,5849,0.0,146.412162,360.0,1.0,]])